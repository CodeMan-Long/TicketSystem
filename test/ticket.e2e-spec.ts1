import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { getConnection } from 'typeorm';

import { AppModule } from '../src/app.module';
import { UpdateTicketInput } from '../src/tickets/dto/update-ticket.input';

describe('AppController (e2e)', () => {
  let app: INestApplication;

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  const gql = '/graphql';

  describe('Ticket', () => {
    it('should create a new ticket', () => {
      return request(app.getHttpServer())
        .post(gql)
        .send({
          query:
            'mutation {createTicket(createTicketInput: { user: 1, plane: 1 }) {id}}',
        })
        .expect(200)
        .expect((res) => {
          expect(res.body.data.createTicket.user).toEqual(1);
          expect(res.body.data.createTicket.plane).toEqual(1);
        });
    });

    it('should get a single ticket by id', () => {
      let ticket;
      return request(app.getHttpServer())
        .post(gql)
        .send({
          query:
            'mutation {createTicket(createTicketInput: { user: 1, plane: 1 }) {id}}',
        })
        .expect(200)
        .expect((res) => {
          ticket = res.body.data.createTicket;
        })
        .then(() =>
          request(app.getHttpServer())
            .post(gql)
            .send({
              query:
                `{ticket(id: ${ticket.id}) {id}}`,
            })
            .expect(200)
            .expect((res) => {
              expect(res.body.data.ticket).toEqual({
                id: ticket.id,
                user: ticket.user,
                plane: ticket.plane,
              });
            })
        );
    });

    it('should retrieve all ticket data', async () => {
      const data = [
        {
          user: 1,
          plane: 1,
        },
        {
          user: 2,
          plane: 2,
        }
      ];

      const connection = await getConnection();
      data.map(async (item) => {
        await connection.createQueryBuilder().insert().into(class { user: Number; plane: Number }).values(item).execute();
      });

      request(app.getHttpServer())
        .post(gql)
        .send({
          query:
            `{tickets() {id user plane}}`,
        })
        .expect(200)
        .expect((res) => {
          expect(res.body.data.tickets.length).toEqual(data.length);
          expect(res.body.data.tickets[0]).toEqual(data[0]);
        });
    });

    it('should update a ticket by id', () => {
      let ticket;
      return request(app.getHttpServer())
        .post(gql)
        .send({
          query:
            'mutation {createTicket(createTicketInput: { user: 1, plane: 1 }) {id user plane}}',
        })
        .expect(200)
        .expect((res) => {
          ticket = res.body.data.createTicket;
        })
        .then(() =>
          request(app.getHttpServer())
            .post(gql)
            .send({
              query:
                `mutation {updateTicket(updateTicketInput: { id: ${ticket.id}, user: 2, plane: 2 }) {id user plane}}`,
            })
            .expect(200)
            .then(() =>
              request(app.getHttpServer())
                .post(gql)
                .send({
                  query:
                    `{ticket(id: ${ticket.id}) {id user plane}}`,
                })
                .expect(200)
                .expect((res) => {
                  expect(res.body.data.ticket).toEqual({
                    id: ticket.id,
                    user: 2,
                    plane: 2,
                  });
                })
            )
        );
    });

    it('should remove a ticket by id', () => {
      let ticket;
      return request(app.getHttpServer())
        .post(gql)
        .send({
          query:
            'mutation {createTicket(createTicketInput: { user: 1, plane: 1 }) {id user plane}}',
        })
        .expect(200)
        .expect((res) => {
          ticket = res.body.data.createTicket;
        })
        .then(() =>
          request(app.getHttpServer())
            .post(gql)
            .send({
              query:
                `mutation {removeTicket(id: ${ticket.id}) {id user plane}}`,
            })
            .expect(200)
            .then(() =>
              request(app.getHttpServer())
                .post(gql)
                .send({
                  query:
                    `{ticket(id: ${ticket.id}) {id user plane}}`,
                })
                .expect(200)
                .expect((res) => {
                  expect(res.body.data).toEqual(null);
                })
            )
        );
    });
  });
});
